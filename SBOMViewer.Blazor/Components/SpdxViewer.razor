@using System.Text.Json
@using System.Text.Json.Serialization
@using SBOMViewer.Blazor.Models.Spdx

@code {

    private Collapse? collapseGeneralInfo;
    private Collapse? collapseCreationInfo;
    private Collapse? collapseFiles;
    private Collapse? collapsePackages;
    private Collapse? collapseRelationships;
    private Collapse? collapseMain;
    private Collapse? collapsePackagesByLicense;

    [Parameter]
    public SpdxDocument? Document { get; set; }

    [Parameter]
    public string? DocumentFileName { get; set; }

    private bool isExpanded;
    private string ChevronStyle => isExpanded ? "transform: rotate(180deg);" : "transform: rotate(0deg);";

    private async Task ToggleAsync(Collapse? collapse)
    {
        if (collapse is not null)
        {
            await collapse.ToggleAsync();
        }
    }
}

@if (Document != null)
{
    <Card Style="background-color:#3e556b">
        <CardHeader Style="color:white"><strong>File Name : </strong>@DocumentFileName</CardHeader>

        <CardBody>
            <!-- General Information -->
            <h4 class="collapsible-header" @onclick="() => ToggleAsync(collapseGeneralInfo)">
                <span>General Information</span>
                <i class="chevron-icon" style="@ChevronStyle"></i>
            </h4>

            <Collapse @ref="collapseGeneralInfo" Horizontal="false">
                <div class="info-container">
                    <div><span><strong>Name:</strong> @Document.Name </span></div>
                    <div><span><strong>SPDX Version:</strong> @Document.SpdxVersion</span></div>
                    <div><span><strong>Data License:</strong> @Document.DataLicense</span></div>
                    <div><span><strong>Document Namespace:</strong> @Document.DocumentNamespace</span></div>
                </div>
            </Collapse>

            <!-- Creation Info -->
            <h4 class="collapsible-header" @onclick="() => ToggleAsync(collapseCreationInfo)">
                <span>Creation Info</span>
                <i class="chevron-icon" style="@ChevronStyle"></i>
            </h4>

            <Collapse @ref="collapseCreationInfo" Horizontal="false">
                <div class="info-container">
                    <div><span><strong>Created:</strong> @Document.CreationInfo.Created</span></div>
                    <div><span><strong>Creators:</strong></span></div>
                    <ul>
                        @foreach (var creator in Document.CreationInfo.Creators)
                        {
                            <li>@creator</li>
                        }
                    </ul>
                </div>
            </Collapse>

            <!-- Files -->
            <h4 class="collapsible-header" @onclick="() => ToggleAsync(collapseFiles)">
                <span>Files | #@Document.Files.Count()</span>
                <i class="chevron-icon" style="@ChevronStyle"></i>
            </h4>

            <Collapse @ref="collapseFiles" Horizontal="false">
                <div class="info-container">
                    <div class="scroll-container">
                        @foreach (var file in Document.Files.OrderBy(f => f.FileName))
                        {
                            <details>
                                <summary>@file.FileName</summary>
                                <div><span><strong>Spx Id: </strong> @file.SpdxId</span></div>
                                <div><span><strong>License Concluded:</strong> @file.LicenseConcluded</span></div>
                                <div><span><strong>Copyright:</strong> @file.CopyrightText</span></div>
                                <div><span><strong>Checksums</strong></span></div>
                                <ul>
                                    @foreach (var checksum in file.Checksums)
                                    {
                                        <li>@checksum.Algorithm: @checksum.ChecksumValue</li>
                                    }
                                </ul>
                            </details>
                        }
                    </div>
                </div>
            </Collapse>


            <!-- Packages -->
            <h4 class="collapsible-header" @onclick="() => ToggleAsync(collapsePackages)">
                <span>Packages | #@Document.Packages.Count()</span>
                <i class="chevron-icon" style="@ChevronStyle"></i>
            </h4>

            <Collapse @ref="collapsePackages" Horizontal="false">
                <div class="info-container">
                    <div class="scroll-container">
                        @foreach (var package in Document.Packages.OrderBy(p => p.Name))
                        {
                            <details>
                                <summary>@package.Name</summary>
                                <div><span><strong>SpdxId:</strong> @package.SpdxId</span></div>
                                <div><span><strong>Version:</strong> @package.VersionInfo</span></div>
                                <div><span><strong>FilesAnalyzed:</strong> @package.FilesAnalyzed</span></div>
                                <div><span><strong>LicenseConcluded:</strong> @package.LicenseConcluded</span></div>
                                <div>
                                    <span>
                                        <strong>LicenseDeclared: </strong>
                                        @{
                                            var license = package.LicenseDeclared;
                                            string? url = null;
                                            if (!string.IsNullOrWhiteSpace(license))
                                            {
                                                if (license.StartsWith("http", StringComparison.OrdinalIgnoreCase))
                                                {
                                                    url = license;
                                                }
                                                else if (license == "NOASSERTION")
                                                {
                                                    url = null; // Kein Link für unbekannte Lizenz

                                                }
                                                else if (license.Contains("LicenseRef-") && license.Contains("Commercial"))
                                                {
                                                    url = null; // Kein Link für kommerzielle Lizenz
                                                }
                                                else
                                                {
                                                    url = $"https://spdx.org/licenses/{license}.html";
                                                }
                                            }
                                        }
                                        @if (!string.IsNullOrWhiteSpace(url))
                                        {
                                            <a href="@url" target="_blank" rel="noopener noreferrer"> @license</a>
                                        }
                                        else
                                        {
                                            @license
                                        }
                                    </span>
                                </div>
                                <div><span><strong>CopyrightText:</strong> @package.CopyrightText</span></div>
                                <div><span><strong>Supplier:</strong> @package.Supplier</span></div>
                                <div><span><strong>Download Location:</strong> @package.DownloadLocation</span></div>
                                <ul>
                                    @if (package.ExternalReferences != null)
                                    {
                                        @foreach (var extRef in package.ExternalReferences)
                                        {
                                            <li>@extRef.ReferenceType | @extRef.ReferenceCategory (@extRef.ReferenceLocator)</li>
                                        }
                                    }
                                </ul>
                            </details>
                        }
                    </div>
                </div>
            </Collapse>

            <!-- Packages nach LicenseConcluded gruppiert -->
            <h4 class="collapsible-header" @onclick="() => ToggleAsync(collapsePackagesByLicense)">
                <span>Packages nach LicenseConcluded</span>
                <i class="chevron-icon" style="@ChevronStyle"></i>
            </h4>
            <Collapse @ref="collapsePackagesByLicense" Horizontal="false">
                <div class="info-container">
                    <div class="scroll-container">
                        @foreach (var group in Document.Packages.GroupBy(p => p.LicenseDeclared).OrderBy(g => g.Key))
                        {
                            <details>
                                <summary><strong>@(group.Key?.Length > 80 ? group.Key.Substring(0, 80) + "..." : group.Key)</strong> (@group.Count())</summary>
                                <ul>
                                    @foreach (var package in group.OrderBy(p => p.Name))
                                    {
                                        <li>
                                            <strong>@package.Name</strong> - Version: @package.VersionInfo<br />
                                            SPDXID: @package.SpdxId<br />
                                            LicenseDeclared: @package.LicenseDeclared<br />
                                            LicenseConcluded: @package.LicenseConcluded<br />
                                            Copyright: @package.CopyrightText<br />
                                            Supplier: @package.Supplier<br />
                                            Download: @package.DownloadLocation<br />
                                        </li>
                                    }
                                </ul>
                            </details>
                        }
                    </div>
                </div>
            </Collapse>

            <!-- Packages nach Supplier gruppiert -->
            <h4 class="collapsible-header" @onclick="() => ToggleAsync(collapseMain)">
                <span>Packages nach Supplier</span>
                <i class="chevron-icon" style="@ChevronStyle"></i>
            </h4>
            <Collapse @ref="collapseMain" Horizontal="false">
                <div class="info-container">
                    <div class="scroll-container">
                        @foreach (var group in Document.Packages.GroupBy(p => p.Supplier ?? "Unbekannt").OrderBy(g => g.Key))
                        {
                            <details>
                                <summary><strong>@group.Key</strong> (@group.Count())</summary>
                                <ul>
                                    @foreach (var package in group.OrderBy(p => p.Name))
                                    {
                                        <li>
                                            <strong>@package.Name</strong> - Version: @package.VersionInfo<br />
                                            SPDXID: @package.SpdxId<br />
                                            LicenseDeclared: @package.LicenseDeclared<br />
                                            LicenseConcluded: @package.LicenseConcluded<br />
                                            Copyright: @package.CopyrightText<br />
                                            Supplier: @package.Supplier<br />
                                            Download: @package.DownloadLocation<br />
                                        </li>
                                    }
                                </ul>
                            </details>
                        }
                    </div>
                </div>
            </Collapse>

            <!-- Relationships -->
            <h4 class="collapsible-header" @onclick="() => ToggleAsync(collapseRelationships)">
                <span>Relationships | #@Document.Packages.Count()</span>
                <i class="chevron-icon" style="@ChevronStyle"></i>
            </h4>

            <Collapse @ref="collapseRelationships" Horizontal="false">
                <div class="info-container">
                    <div class="scroll-container">
                        @foreach (var relationship in Document.Relationships)
                        {
                            <details>
                                <summary>@relationship.SpdxElementId</summary>
                                <div><span>@relationship.RelationshipType → @relationship.RelatedSpdxElement</span></div>
                            </details>
                        }
                    </div>
                </div>
            </Collapse>
        </CardBody>
    </Card>
}

